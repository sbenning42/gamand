scalar JSON

type Role {
    id: ID!
    name: String!
}

type Credentials {
    email: String!
    password: String!
}

type Profil {
    email: String!
    name: String!
}

type User {
    id: ID!
    roles: [HasRole]
    credentials: OwnCredentials
    profil: OwnProfil
    resources: [OwnTodo]
}

interface Resource {
    id: ID!
}

type Todo implements Resource {
    id: ID!
    title: String!
    done: Boolean!
}

#########################################################

type HasRole @relation(name: "HAS") {
    from: User
    to: Role
    createdAt: DateTime
}
type OwnCredentials @relation(name: "OWN") {
    from: User
    to: Credentials
    createdAt: DateTime
}
type OwnProfil @relation(name: "OWN") {
    from: User
    to: Profil
    createdAt: DateTime
}
type OwnTodo @relation(name: "OWN") {
    from: User
    to: Todo
    createdAt: DateTime
}

########################################

type Query {
    Role(id: ID first: Int offset: Int orderBy: [_RoleOrdering] filter: _RoleFilter): [Role] @cypher(
        statement: "MATCH (this) RETURN this"
    )
    User(id: ID first: Int offset: Int orderBy: [_UserOrdering] filter: _UserFilter): [User] @cypher(
        statement: "MATCH (this) RETURN this"
    )
    Todo(id: ID first: Int offset: Int orderBy: [_TodoOrdering] filter: _TodoFilter): [Todo] @cypher(
        statement: "MATCH (this) RETURN this"
    )
}

type Mutation {
    CreateUser(email: String! password: String! name: String!): User @cypher(
        statement: """
            MATCH (r:Role {name:\"user\"})
            CREATE (this:User {id:apoc.create.uuid()}),
                (this)-[:HAS {createdAt:date()}]->(r),
                (this)-[:OWN {createdAt:date()}]->(p:Profil {email:$email, name:$name}),
                (this)-[:OWN {createdAt:date()}]->(c:Credentials {email:$email, password:$password})
            RETURN this
        """
    )
} 