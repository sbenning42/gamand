scalar JSON

directive @self on OBJECT
directive @owned on OBJECT
directive @auth(for: [String!]!) on OBJECT | FIELD_DEFINITION
directive @admin(for: [String!]!) on OBJECT | FIELD_DEFINITION
directive @hasRole(for: [String!]!, name: [String!]!) on OBJECT | FIELD_DEFINITION

# @admin(for: [...]) is a shortcut for @hasRole(for: [...] name: ["admin"])

type Role @auth(for: ["query"]) @admin(for: ["mutations"]) {
    id: ID!
    name: String!
}

type Todo @auth(for: ["query"]) @admin(for: ["mutations"]) {
    id: ID!  
    title: String!   
    done: Boolean!  
    owner: OwnTodo
}

type User @hasRole(for: ["all"] name: ["admin", "self"]) @self {
    id: ID!
    roles: [HasRole]
    credentials: OwnCredentials
    profils: OwnProfil
    todos: [OwnTodo]
}

type Credentials @hasRole(for: ["all"] name: ["admin", "owner"]) @owned {
    id: ID!
    email: String!
    password: String
    owner: OwnCredentials
}

type Profil @hasRole(for: ["all"] name: ["admin", "owner"]) @owned {
    id: ID!
    email: String!
    name: String!    
    birthdate: DateTime!
    owner: OwnProfil
}

#####################################################################################################################

type HasRole @relation(name: "HAS") {
    from: User
    to: Role
    createdAt: DateTime!
}

type OwnCredentials @relation(name: "OWN") {
    from: User
    to: Credentials
    createdAt: DateTime!
}

type OwnProfil @relation(name: "OWN") {
    from: User
    to: Profil
    createdAt: DateTime!
}

type OwnTodo @relation(name: "OWN") {
    from: User
    to: Todo
    createdAt: DateTime!
}

#######################################################################################################################
